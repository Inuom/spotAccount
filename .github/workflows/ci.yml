name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-west-1'

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm run test:cov
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Run backend linting
      run: |
        cd backend
        npm run lint
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run backend type checking
      run: |
        cd backend
        npm run build
        
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run build


  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push backend Docker image
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$GITHUB_SHA .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$GITHUB_SHA
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: spotaccount-backend
        
    - name: Build and push frontend Docker image
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$GITHUB_SHA .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$GITHUB_SHA
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: spotaccount-frontend

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy infrastructure with Terraform
      run: |
        cd infrastructure/terraform
        terraform init
        terraform plan -var-file="production.tfvars"
        terraform apply -auto-approve -var-file="production.tfvars"
        
    - name: Deploy application to ECS
      run: |
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster spotaccount-cluster \
          --service spotaccount-service \
          --force-new-deployment
          
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster spotaccount-cluster \
          --services spotaccount-service
          
    - name: Health check
      run: |
        # Get ALB DNS name from Terraform output
        ALB_DNS=$(cd infrastructure/terraform && terraform output -raw alb_dns_name)
        curl -f http://$ALB_DNS/healthz || exit 1