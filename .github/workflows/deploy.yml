name: Infrastructure Deployment

on:
  push:
    branches: [ master ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      skip_approval:
        description: 'Skip approval requirement'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: 'us-east-1'
  TF_VERSION: '1.5.0'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TERRAFORM_BACKEND_DYNAMODB_TABLE }}"
          
    - name: Terraform Plan
      id: plan
      run: |
        cd infrastructure/terraform
        terraform plan -var-file="production.tfvars" -out=tfplan
        terraform show -no-color tfplan > plan.txt
        
        # Count resource changes
        ADD=$(terraform show -json tfplan | jq '[.resource_changes[]? | select(.change.actions[] == "create")] | length')
        MODIFY=$(terraform show -json tfplan | jq '[.resource_changes[]? | select(.change.actions[] == "update")] | length')
        DESTROY=$(terraform show -json tfplan | jq '[.resource_changes[]? | select(.change.actions[] == "destroy")] | length')
        
        echo "add_count=$ADD" >> $GITHUB_OUTPUT
        echo "modify_count=$MODIFY" >> $GITHUB_OUTPUT
        echo "destroy_count=$DESTROY" >> $GITHUB_OUTPUT
        
        # Log infrastructure changes
        echo "## Infrastructure Changes" >> $GITHUB_STEP_SUMMARY
        echo "### Resource Changes:" >> $GITHUB_STEP_SUMMARY
        echo "- **Add**: $ADD resources" >> $GITHUB_STEP_SUMMARY
        echo "- **Modify**: $MODIFY resources" >> $GITHUB_STEP_SUMMARY
        echo "- **Destroy**: $DESTROY resources" >> $GITHUB_STEP_SUMMARY
        
    - name: Infrastructure Change Validation
      run: |
        cd infrastructure/terraform
        # Validate no destructive changes in production without approval
        if [ "${{ steps.plan.outputs.destroy_count }}" -gt 0 ]; then
          echo "‚ö†Ô∏è WARNING: This plan will DESTROY ${{ steps.plan.outputs.destroy_count }} resources!"
          echo "Approval required for destructive changes."
          if [ "${{ github.event.inputs.skip_approval }}" != "true" ]; then
            exit 1
          fi
        fi
        
        # Log detailed changes
        echo "### Detailed Changes:" >> $GITHUB_STEP_SUMMARY
        terraform show -json tfplan | jq -r '.resource_changes[] | "\(.address): \(.change.actions)"' >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: infrastructure/terraform/plan.txt
        
    - name: Comment PR with plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infrastructure/terraform/plan.txt', 'utf8');
          const output = `## Terraform Plan Results\n\n\`\`\`\n${plan}\n\`\`\``;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  approval:
    name: Infrastructure Change Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: steps.plan.outputs.destroy_count > 0 && github.event.inputs.skip_approval != 'true'
    environment:
      name: infrastructure-deployment
    
    steps:
    - name: Wait for approval
      run: |
        echo "‚è≥ Waiting for manual approval..."
        echo "This deployment contains destructive changes and requires approval."

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/master' && (github.event.inputs.skip_approval == 'true' || needs.approval.result == 'success' || needs.terraform-plan.outputs.destroy_count == '0')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: infrastructure/terraform/
        
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TERRAFORM_BACKEND_DYNAMODB_TABLE }}"
          -backend-config="encrypt=true"
          
    - name: Terraform State Lock Check
      run: |
        cd infrastructure/terraform
        echo "üîí Checking Terraform state lock..."
        terraform force-unlock -force || echo "No lock detected"
        
    - name: Terraform Apply with Logging
      id: apply
      continue-on-error: true
      run: |
        cd infrastructure/terraform
        set -e
        
        echo "üöÄ Applying infrastructure changes..."
        terraform apply -auto-approve -var-file="production.tfvars" 2>&1 | tee apply.log
        
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "‚úÖ Infrastructure changes applied successfully"
        else
          echo "‚ùå Infrastructure changes failed"
          exit 1
        fi
        
    - name: Rollback on Failure
      if: steps.apply.outcome == 'failure'
      run: |
        cd infrastructure/terraform
        echo "üîÑ Initiating rollback..."
        
        # Attempt to rollback to previous state if available
        if [ -f "terraform.tfstate.bak" ]; then
          echo "Restoring previous state..."
          aws s3 cp s3://${{ secrets.TERRAFORM_BACKEND_BUCKET }}/terraform.tfstate.backup terraform.tfstate || true
          terraform refresh
        fi
        
        echo "‚ùå Rollback attempted. Manual intervention may be required."
        exit 1
        
    - name: Output Infrastructure Information
      if: steps.apply.outcome == 'success'
      run: |
        cd infrastructure/terraform
        echo "## Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "### VPC ID: $(terraform output -raw vpc_id 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        echo "### ECS Cluster: $(terraform output -raw ecs_cluster_id 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        echo "### RDS Endpoint: $(terraform output -raw rds_endpoint 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        echo "### CloudFront Domain: $(terraform output -raw cloudfront_domain_name 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        
    - name: Infrastructure Change Logging
      if: steps.apply.outcome == 'success'
      run: |
        cd infrastructure/terraform
        # Create deployment log entry
        cat >> deployment.log << EOF
        ===================================
        Infrastructure Deployment Log
        ===================================
        Date: $(date -u)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref }}
        Actor: ${{ github.actor }}
        Environment: production
        Status: SUCCESS
        ===================================
        EOF
        
        # Upload deployment log to S3
        aws s3 cp deployment.log s3://${{ secrets.TERRAFORM_BACKEND_BUCKET }}/logs/deployment-$(date +%Y%m%d-%H%M%S).log || true

  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Validate VPC
      run: |
        cd infrastructure/terraform
        VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "")
        if [ -z "$VPC_ID" ]; then
          echo "‚ö†Ô∏è VPC ID not found, skipping validation"
        else
          aws ec2 describe-vpcs --vpc-ids $VPC_ID --query 'Vpcs[0].State' --output text
        fi
        
    - name: Validate ECS Cluster
      run: |
        cd infrastructure/terraform
        CLUSTER_ARN=$(terraform output -raw ecs_cluster_arn 2>/dev/null || echo "")
        if [ -z "$CLUSTER_ARN" ]; then
          echo "‚ö†Ô∏è ECS Cluster ARN not found, skipping validation"
        else
          aws ecs describe-clusters --clusters $CLUSTER_ARN --query 'clusters[0].status' --output text
        fi
        
    - name: Validate RDS Instance
      run: |
        cd infrastructure/terraform
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null || echo "")
        if [ -z "$RDS_ENDPOINT" ]; then
          echo "‚ö†Ô∏è RDS Endpoint not found, skipping validation"
        else
          aws rds describe-db-instances --query "DBInstances[?Endpoint.Address=='$RDS_ENDPOINT'].DBInstanceStatus" --output text
        fi
        
    - name: Validate S3 Bucket
      run: |
        cd infrastructure/terraform
        BUCKET_ID=$(terraform output -raw s3_bucket_id 2>/dev/null || echo "")
        if [ -z "$BUCKET_ID" ]; then
          echo "‚ö†Ô∏è S3 Bucket ID not found, skipping validation"
        else
          aws s3api head-bucket --bucket $BUCKET_ID
        fi
        
    - name: Validate CloudFront Distribution
      run: |
        cd infrastructure/terraform
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
        if [ -z "$DISTRIBUTION_ID" ]; then
          echo "‚ö†Ô∏è CloudFront Distribution ID not found, skipping validation"
        else
          aws cloudfront get-distribution --id $DISTRIBUTION_ID --query 'Distribution.Status' --output text
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [terraform-apply, infrastructure-validation]
    if: always()
    
    steps:
    - name: Infrastructure Change Notifications
      run: |
        STATUS="‚úÖ SUCCESS"
        if [ "${{ needs.terraform-apply.result }}" != "success" ] || [ "${{ needs.infrastructure-validation.result }}" != "success" ]; then
          STATUS="‚ùå FAILED"
        fi
        
        echo "## Infrastructure Deployment Status: $STATUS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Terraform Apply**: ${{ needs.terraform-apply.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Infrastructure Validation**: ${{ needs.infrastructure-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify Success
      if: needs.terraform-apply.result == 'success' && needs.infrastructure-validation.result == 'success'
      run: |
        echo "‚úÖ Infrastructure deployment completed successfully!"
        echo "All AWS resources have been provisioned and validated."
        
    - name: Notify Failure
      if: needs.terraform-apply.result == 'failure' || needs.infrastructure-validation.result == 'failure'
      run: |
        echo "‚ùå Infrastructure deployment failed!"
        echo "Please check the logs for details."
        exit 1