name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./infrastructure/terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform
      run: terraform plan -var-file="production.tfvars"

    - name: Terraform Apply
      working-directory: ./infrastructure/terraform
      run: terraform apply -auto-approve -var-file="production.tfvars"

    - name: Deploy Backend to ECS
      run: |
        # Build and push Docker image
        docker build -t ${{ secrets.ECR_REGISTRY }}/backend:latest ./backend
        docker push ${{ secrets.ECR_REGISTRY }}/backend:latest
        
        # Update ECS service
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE_BACKEND }} \
          --force-new-deployment

    - name: Deploy Frontend to S3
      run: |
        # Build frontend
        cd frontend
        npm ci
        npm run build
        
        # Upload to S3
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_FRONTEND }} --delete
        
        # Invalidate CloudFront cache
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

    - name: Run Database Migrations
      run: |
        # Get ECS task ARN
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER }} --service-name ${{ secrets.ECS_SERVICE_BACKEND }} --query 'taskArns[0]' --output text)
        
        # Run migrations
        aws ecs execute-command \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --task $TASK_ARN \
          --container backend \
          --command "npx prisma migrate deploy" \
          --interactive

    - name: Health Check
      run: |
        # Wait for deployment to be healthy
        aws ecs wait services-stable \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE_BACKEND }}
        
        # Test health endpoint
        curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1
